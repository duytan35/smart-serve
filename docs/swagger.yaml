basePath: /api/v1
definitions:
  controllers.Response:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  controllers.SignInData:
    properties:
      email:
        example: example@gmail.com
        type: string
      password:
        example: "12345678"
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  controllers.SignInResponse:
    properties:
      accessToken:
        type: string
      address:
        type: string
      avatar:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      phone:
        type: string
      steps:
        items:
          $ref: '#/definitions/models.OrderStep'
        type: array
    type: object
  models.CreateDishInput:
    properties:
      description:
        example: Phở bò Việt Nam
        type: string
      dishGroupId:
        example: "1"
        type: string
      imageIds:
        example:
        - 7c5a4b8f-fcf6-48d3-b21a-d81ebdfdf6f1
        - 1566e532-72d4-49d4-8fca-c9142816006a
        items:
          type: string
        type: array
      name:
        example: Phở
        type: string
      price:
        example: 50000
        type: number
      status:
        example: 1
        type: integer
    required:
    - dishGroupId
    - imageIds
    - name
    - price
    type: object
  models.CreateOrderInput:
    properties:
      orderDetails:
        items:
          $ref: '#/definitions/models.OrderDetailInput'
        type: array
      tableId:
        example: 1
        type: integer
    required:
    - orderDetails
    - tableId
    type: object
  models.CreateRestaurantInput:
    properties:
      address:
        example: 36 Pasteur, Ben Nghe, Quan 1, Ho Chi Minh City
        type: string
      email:
        example: example@gmail.com
        type: string
      name:
        example: Example Restaurant
        type: string
      password:
        example: "12345678"
        minLength: 8
        type: string
      phone:
        example: "1234567890"
        type: string
    required:
    - address
    - email
    - name
    - password
    - phone
    type: object
  models.Dish:
    properties:
      createdAt:
        type: string
      description:
        description: optional
        type: string
      dishGroupId:
        type: integer
      id:
        type: integer
      imageIds:
        items:
          type: string
        type: array
      name:
        type: string
      price:
        type: number
      status:
        description: '0: inactive, 1: active'
        type: integer
      updatedAt:
        type: string
    required:
    - dishGroupId
    - name
    - price
    type: object
  models.DishGroup:
    properties:
      createdAt:
        type: string
      dishes:
        items:
          $ref: '#/definitions/models.Dish'
        type: array
      id:
        type: integer
      name:
        type: string
      restaurantId:
        type: string
      updatedAt:
        type: string
    required:
    - name
    type: object
  models.DishGroupInput:
    properties:
      name:
        example: Noodles
        type: string
    required:
    - name
    type: object
  models.DishGroupResponse:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      restaurantId:
        type: string
      updatedAt:
        type: string
    type: object
  models.File:
    properties:
      createdAt:
        type: string
      id:
        type: string
      mineType:
        type: string
      name:
        type: string
      restaurantId:
        type: string
      updatedAt:
        type: string
    required:
    - mineType
    - name
    type: object
  models.MenuDish:
    properties:
      description:
        description: optional
        type: string
      id:
        type: integer
      imageIds:
        items:
          type: string
        type: array
      name:
        type: string
      price:
        type: number
    required:
    - name
    - price
    type: object
  models.MenuDishGroup:
    properties:
      dishes:
        items:
          $ref: '#/definitions/models.MenuDish'
        type: array
      groupId:
        type: integer
      groupName:
        type: string
    type: object
  models.MenuResponse:
    properties:
      menu:
        items:
          $ref: '#/definitions/models.MenuDishGroup'
        type: array
      restaurantAddress:
        type: string
      restaurantAvatar:
        type: string
      restaurantId:
        type: string
      restaurantName:
        type: string
      steps:
        items:
          $ref: '#/definitions/models.OrderStep'
        type: array
    type: object
  models.OrderDetailInput:
    properties:
      discountIds:
        example:
        - 1
        - 2
        items:
          type: integer
        type: array
      dishId:
        example: 1
        type: integer
      note:
        example: Note
        type: string
      quantity:
        example: 2
        type: integer
    required:
    - dishId
    - quantity
    type: object
  models.OrderDetailResponse:
    properties:
      createdAt:
        type: string
      discountPercent:
        type: number
      dishDescription:
        type: string
      dishId:
        type: integer
      dishName:
        type: string
      dishPrice:
        type: number
      groupOrderNumber:
        type: integer
      id:
        type: integer
      imageIds:
        items:
          type: string
        type: array
      note:
        type: string
      quantity:
        type: integer
      step:
        type: integer
      updatedAt:
        type: string
    type: object
  models.OrderResponse:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      orderDetails:
        items:
          $ref: '#/definitions/models.OrderDetailResponse'
        type: array
      status:
        $ref: '#/definitions/models.OrderStatus'
      tableId:
        type: integer
      updatedAt:
        type: string
    type: object
  models.OrderStatus:
    enum:
    - InProgress
    - Complete
    - Cancel
    type: string
    x-enum-varnames:
    - StatusInProgress
    - StatusComplete
    - StatusCancel
  models.OrderStep:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      restaurantId:
        type: string
      step:
        type: integer
      updatedAt:
        type: string
    required:
    - name
    - step
    type: object
  models.RestaurantResponse:
    properties:
      address:
        type: string
      avatar:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      phone:
        type: string
      steps:
        items:
          $ref: '#/definitions/models.OrderStep'
        type: array
    type: object
  models.Table:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      restaurantId:
        type: string
      seats:
        description: optional
        type: integer
      updatedAt:
        type: string
    required:
    - name
    type: object
  models.TableInput:
    properties:
      name:
        example: Bàn 1
        type: string
      seats:
        example: 4
        type: integer
    required:
    - name
    type: object
  models.UpdateDishInput:
    properties:
      description:
        example: Phở bò Việt Nam
        type: string
      imageIds:
        example:
        - 7c5a4b8f-fcf6-48d3-b21a-d81ebdfdf6f1
        - 1566e532-72d4-49d4-8fca-c9142816006a
        items:
          type: string
        type: array
      name:
        example: Phở
        type: string
      price:
        example: 50000
        type: number
      status:
        example: 1
        type: integer
    required:
    - imageIds
    - name
    - price
    type: object
  models.UpdateOrderInput:
    properties:
      orderDetails:
        items:
          $ref: '#/definitions/models.OrderDetailInput'
        type: array
      status:
        allOf:
        - $ref: '#/definitions/models.OrderStatus'
        example: InProgress
    type: object
  models.UpdateOrderStepInput:
    properties:
      step:
        example: 1
        type: integer
    required:
    - step
    type: object
  models.UpdateRestaurantInput:
    properties:
      address:
        type: string
      avatar:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      phone:
        type: string
    type: object
  models.UpdateStepsInput:
    properties:
      steps:
        items:
          type: string
        type: array
    required:
    - steps
    type: object
info:
  contact: {}
  description: Smart Serve API
  title: Smart Serve
  version: "1.0"
paths:
  /admin/restaurants:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.RestaurantResponse'
                  type: array
              type: object
      security:
      - BearerAuth: []
      tags:
      - Admin
  /admin/restaurants/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  type: object
              type: object
      security:
      - BearerAuth: []
      tags:
      - Admin
    get:
      consumes:
      - application/json
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.RestaurantResponse'
              type: object
      security:
      - BearerAuth: []
      tags:
      - Admin
  /auth/me:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.RestaurantResponse'
              type: object
      security:
      - BearerAuth: []
      tags:
      - Auth
  /auth/sign-in:
    post:
      consumes:
      - application/json
      parameters:
      - description: Sign in data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.SignInData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/controllers.SignInResponse'
              type: object
      tags:
      - Auth
  /client/menu:
    get:
      consumes:
      - application/json
      parameters:
      - description: Restaurant ID
        in: query
        name: restaurantId
        required: true
        type: string
      - description: table ID
        in: query
        name: tableId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.MenuResponse'
              type: object
      tags:
      - Client
  /client/order:
    get:
      consumes:
      - application/json
      parameters:
      - description: Table ID
        in: query
        name: tableId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.OrderResponse'
              type: object
      security:
      - BearerAuth: []
      tags:
      - Client
  /dish-groups:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.DishGroup'
                  type: array
              type: object
      security:
      - BearerAuth: []
      tags:
      - DishGroups
    post:
      consumes:
      - application/json
      parameters:
      - description: DishGroup Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.DishGroupInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.DishGroupResponse'
              type: object
      security:
      - BearerAuth: []
      tags:
      - DishGroups
  /dish-groups/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: DishGroup ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  type: object
              type: object
      security:
      - BearerAuth: []
      tags:
      - DishGroups
    get:
      consumes:
      - application/json
      parameters:
      - description: DishGroup ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.DishGroup'
              type: object
      security:
      - BearerAuth: []
      tags:
      - DishGroups
    put:
      consumes:
      - application/json
      parameters:
      - description: DishGroup ID
        in: path
        name: id
        required: true
        type: string
      - description: DishGroup Data
        in: body
        name: dishGroup
        required: true
        schema:
          $ref: '#/definitions/models.DishGroupInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.DishGroupResponse'
              type: object
      security:
      - BearerAuth: []
      tags:
      - DishGroups
  /dishes:
    get:
      consumes:
      - application/json
      parameters:
      - description: Dish Group ID
        in: query
        name: dishGroupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Dish'
                  type: array
              type: object
      security:
      - BearerAuth: []
      tags:
      - Dishes
    post:
      consumes:
      - application/json
      parameters:
      - description: Dish Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CreateDishInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Dish'
              type: object
      security:
      - BearerAuth: []
      tags:
      - Dishes
  /dishes/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Dish ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  type: object
              type: object
      security:
      - BearerAuth: []
      tags:
      - Dishes
    get:
      consumes:
      - application/json
      parameters:
      - description: Dish ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Dish'
              type: object
      security:
      - BearerAuth: []
      tags:
      - Dishes
    put:
      consumes:
      - application/json
      parameters:
      - description: Dish ID
        in: path
        name: id
        required: true
        type: string
      - description: Dish Data
        in: body
        name: DishInput
        required: true
        schema:
          $ref: '#/definitions/models.UpdateDishInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Dish'
              type: object
      security:
      - BearerAuth: []
      tags:
      - Dishes
  /files:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.File'
              type: object
      security:
      - BearerAuth: []
      tags:
      - Files
  /files/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  type: object
              type: object
      security:
      - BearerAuth: []
      tags:
      - Files
    get:
      consumes:
      - application/json
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "302":
          description: Found
      tags:
      - Files
    put:
      consumes:
      - multipart/form-data
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.File'
              type: object
      security:
      - BearerAuth: []
      tags:
      - Files
  /orders:
    get:
      consumes:
      - application/json
      parameters:
      - description: Table ID
        in: query
        name: tableId
        type: string
      - description: Status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.OrderResponse'
                  type: array
              type: object
      security:
      - BearerAuth: []
      tags:
      - Orders
    post:
      consumes:
      - application/json
      parameters:
      - description: Order Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrderInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.OrderResponse'
              type: object
      summary: Use for both restaurant and client
      tags:
      - Orders
  /orders/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  type: object
              type: object
      security:
      - BearerAuth: []
      tags:
      - Orders
    get:
      consumes:
      - application/json
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.OrderResponse'
              type: object
      summary: Use for both restaurant and client
      tags:
      - Orders
    patch:
      consumes:
      - application/json
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Order Data
        in: body
        name: OrderInput
        required: true
        schema:
          $ref: '#/definitions/models.UpdateOrderInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.OrderResponse'
              type: object
      security:
      - BearerAuth: []
      tags:
      - Orders
  /orders/order-details/{id}:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Order Detail ID
        in: path
        name: id
        required: true
        type: string
      - description: Order Step Data
        in: body
        name: UpdateOrderStepInput
        required: true
        schema:
          $ref: '#/definitions/models.UpdateOrderStepInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  type: object
              type: object
      security:
      - BearerAuth: []
      tags:
      - Orders
  /restaurants:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Restaurant Data
        in: body
        name: restaurant
        required: true
        schema:
          $ref: '#/definitions/models.UpdateRestaurantInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.RestaurantResponse'
              type: object
      security:
      - BearerAuth: []
      tags:
      - Restaurants
    post:
      consumes:
      - application/json
      parameters:
      - description: Restaurant Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CreateRestaurantInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.RestaurantResponse'
              type: object
      tags:
      - Restaurants
  /restaurants/steps:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Steps Data
        in: body
        name: restaurant
        required: true
        schema:
          $ref: '#/definitions/models.UpdateStepsInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  type: object
              type: object
      security:
      - BearerAuth: []
      tags:
      - Restaurants
  /tables:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Table'
                  type: array
              type: object
      security:
      - BearerAuth: []
      tags:
      - Tables
    post:
      consumes:
      - application/json
      parameters:
      - description: Table Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.TableInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Table'
              type: object
      security:
      - BearerAuth: []
      tags:
      - Tables
  /tables/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Table ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  type: object
              type: object
      security:
      - BearerAuth: []
      tags:
      - Tables
    get:
      consumes:
      - application/json
      parameters:
      - description: Table ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Table'
              type: object
      security:
      - BearerAuth: []
      tags:
      - Tables
    put:
      consumes:
      - application/json
      parameters:
      - description: Table ID
        in: path
        name: id
        required: true
        type: string
      - description: Table Data
        in: body
        name: TableInput
        required: true
        schema:
          $ref: '#/definitions/models.TableInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Table'
              type: object
      security:
      - BearerAuth: []
      tags:
      - Tables
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
