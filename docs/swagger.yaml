basePath: /api/v1
definitions:
  controllers.Response:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  controllers.SignInData:
    properties:
      email:
        example: example@gmail.com
        type: string
      password:
        example: "12345678"
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  controllers.SignInResponse:
    properties:
      accessToken:
        type: string
      address:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
    required:
    - address
    - email
    - name
    - phone
    type: object
  models.CreateRestaurantInput:
    properties:
      address:
        example: 36 Pasteur, Ben Nghe, Quan 1, Ho Chi Minh City
        type: string
      email:
        example: example@gmail.com
        type: string
      name:
        example: Example Restaurant
        type: string
      password:
        example: "12345678"
        minLength: 8
        type: string
      phone:
        example: "1234567890"
        type: string
    required:
    - address
    - email
    - name
    - password
    - phone
    type: object
  models.Restaurant:
    properties:
      address:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
    required:
    - address
    - email
    - name
    - phone
    type: object
  models.UpdateRestaurantInput:
    properties:
      address:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      phone:
        type: string
    type: object
host: localhost:5000
info:
  contact: {}
  description: Smart Serve API
  title: Smart Serve
  version: "1.0"
paths:
  /auth/me:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Restaurant'
              type: object
      security:
      - BearerAuth: []
      tags:
      - Auth
  /auth/sign-in:
    post:
      consumes:
      - application/json
      parameters:
      - description: Sign in data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.SignInData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/controllers.SignInResponse'
              type: object
      tags:
      - Auth
  /restaurants:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Restaurant'
                  type: array
              type: object
      security:
      - BearerAuth: []
      tags:
      - Admin
    patch:
      consumes:
      - application/json
      parameters:
      - description: Restaurant Data
        in: body
        name: restaurant
        required: true
        schema:
          $ref: '#/definitions/models.UpdateRestaurantInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Restaurant'
              type: object
      security:
      - BearerAuth: []
      tags:
      - Restaurants
    post:
      consumes:
      - application/json
      parameters:
      - description: Restaurant Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CreateRestaurantInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Restaurant'
              type: object
      tags:
      - Restaurants
  /restaurants/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  type: object
              type: object
      security:
      - BearerAuth: []
      tags:
      - Admin
    get:
      consumes:
      - application/json
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Restaurant'
              type: object
      security:
      - BearerAuth: []
      tags:
      - Admin
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
