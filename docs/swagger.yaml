basePath: /api/v1
definitions:
  controllers.SignInData:
    properties:
      email:
        example: user@gmail.com
        type: string
      password:
        example: "12345678"
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  controllers.SignInResponse:
    properties:
      accessToken:
        type: string
    type: object
  models.CreateRestaurantInput:
    properties:
      address:
        example: 36 Pasteur, Ben Nghe, Quan 1, Ho Chi Minh City
        type: string
      email:
        example: example@gmail.com
        type: string
      name:
        example: Example Restaurant
        type: string
      phone:
        example: "1234567890"
        type: string
    required:
    - address
    - email
    - name
    - phone
    type: object
  models.CreateUserInput:
    properties:
      email:
        example: user@gmail.com
        type: string
      name:
        example: Nguyen Van A
        type: string
      password:
        example: "12345678"
        minLength: 8
        type: string
      restaurantId:
        description: Foreign key
        type: integer
    required:
    - email
    - name
    - password
    - restaurantId
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.Restaurant:
    properties:
      address:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    required:
    - address
    - email
    - name
    - phone
    type: object
  models.UpdateRestaurantInput:
    properties:
      address:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  models.UpdateUserInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      restaurant:
        $ref: '#/definitions/models.Restaurant'
      restaurantId:
        description: Foreign key
        type: integer
    required:
    - email
    - name
    type: object
host: localhost:5000
info:
  contact: {}
  description: Smart Serve API
  title: Smart Serve
  version: "1.0"
paths:
  /auth/me:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      tags:
      - Auth
  /auth/sign-in:
    post:
      consumes:
      - application/json
      parameters:
      - description: Sign in data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.SignInData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.SignInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      tags:
      - Auth
  /restaurants:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Restaurant'
            type: array
      tags:
      - Restaurants
    post:
      consumes:
      - application/json
      parameters:
      - description: Restaurant Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CreateRestaurantInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Restaurant'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      tags:
      - Restaurants
  /restaurants/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      tags:
      - Restaurants
    get:
      consumes:
      - application/json
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Restaurant'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      tags:
      - Restaurants
    patch:
      consumes:
      - application/json
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      - description: Restaurant Data
        in: body
        name: restaurant
        required: true
        schema:
          $ref: '#/definitions/models.UpdateRestaurantInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Restaurant'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      tags:
      - Restaurants
  /users:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      security:
      - BearerAuth: []
      tags:
      - Users
    post:
      consumes:
      - application/json
      parameters:
      - description: User Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      tags:
      - Users
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      tags:
      - Users
    patch:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      tags:
      - Users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
